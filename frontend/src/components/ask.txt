hello  chat  analyse  this code  and tell me  what  it  does  go explainig  line  by  line 
import productModel from "../models/Database.js";
import Sale from "../models/salesModel.js";
export const createProduct = async (req, res) => {
  const { productName, productQuantity, buyingPrice, sellingPrice } = req.body;

  try {
    const product = await productModel.findOne({ productName });
    const newBatch = {
      productQuantity,
      buyingPrice,
      sellingPrice,
    };

    if (product) {
      product.stock.push(newBatch);
      await product.save();
      res.json({ message: "Product updated", product });
    } else {
      const newProduct = await productModel.create({
        productName,
        stock: [newBatch],
      });
      res.status(201).json({
        message: "Product created",
        newProduct,
      });
    }
  } catch (error) {
    console.error("Error in createProduct:", error);
    res.status(500).json({ error: "Something went wrong" });
  }
};

export const recordSale = async (req, res) => {
  const results = [];
  try {
    //force array structure
    let sales = Array.isArray(req.body) ? req.body : [req.body];

    // Validate structure
    if (!sales.every((sale) => sale.productName && sale.quantity)) {
      return res.status(400).json({ error: "Invalid sales data format" });
    }

    for (const sale of sales) {
      const { productName, quantity } = sale;

      const product = await productModel.findOne({ productName });

      if (!product) {
        results.push({ productName, status: "not found" });
        continue;
      }

      let qtyToSubtract = quantity;
      const stock = product.stock;

      for (let i = 0; i < stock.length && qtyToSubtract > 0; i++) {
        const batch = stock[i];
        const available = parseFloat(batch.productQuantity);
        if (available <= 0) continue;

        if (available >= qtyToSubtract) {
          batch.productQuantity = (available - qtyToSubtract).toFixed(2);
          qtyToSubtract = 0;
        } else {
          batch.productQuantity = 0;
          qtyToSubtract -= available;
        }
      }

      if (qtyToSubtract > 0) {
        results.push({ productName, status: "insufficient stock" });
        continue;
      }

      await product.save();
      results.push({ productName, status: "updated" });
    }
    res.json({ message: "sales recorded", results });
  } catch (error) {
    console.error("Error recording sales:", error);
    res.status(500).json({ error: "Failed to record sales" });
  }
};

export const getProductNames = async (req, res) => {
  try {
    const products = await productModel.find({}, "productName");
    const names = products.map((product) => product.productName);
    res.json(names);
  } catch (error) {
    console.error("Error fetching product names:", error);
    res.status(500).json({ error: "Failed to fetch product names" });
  }
};
export const bulkSalesRecords = async (req, res) => {
  const rawSales = Array.isArray(req.body) ? req.body : [req.body];
  if (!rawSales.every((sale) => sale.productName && sale.quantity)) {
    return res.status(400).json({ error: "Invalid sales formta" });
  }

  const merged = {};
  for (const { productName, quantity } of rawSales) {
    const name = productName.trim();
    merged[name] = (merged[name] || 0) + Number(quantity);
  }

   };




import axios from "axios";
import { useState, useEffect } from "react";
import SuccessCard from "../Card";
import "./Create.css"; // Renamed for clarity

const Create = () => {
  const [name, setname] = useState("");
  const [quantity, setQuantity] = useState("");
  const [Bprice, setBprice] = useState("");
  const [Sprice, setSprice] = useState("");
  const [error, setError] = useState("");
  const [showSuccess, setShowSuccess] = useState(false);
  const [productNames, setproductNames] = useState([]);
  const handleSubmit = (event) => {
    event.preventDefault();
    setError("");
    if (!name) return setError("please provide product name");
    if (!quantity) return setError("please provide quantity");
    if (!Bprice) return setError("please provide buying price");
    if (!Sprice) return setError("please provide selling price");

    if (isNaN(quantity)) return setError("Quantity must be a number");
    if (isNaN(Bprice)) return setError("Buying price must be a number");
    if (isNaN(Sprice)) return setError("Selling price must be a number");

    axios
      .post("http://localhost:5000/createProduct", {
        productName: name,
        productQuantity: Number(quantity),
        buyingPrice: Number(Bprice),
        sellingPrice: Number(Sprice),
      })
      .then(() => {
        setShowSuccess(true);
        setTimeout(() => setShowSuccess(false), 3000);
        setname("");
        setQuantity("");
        setBprice("");
        setSprice("");
        setError("");
      })
      .catch(() => {
        setError("Failed to create product");
      });
  };
  useEffect(() => {
    axios
      .get("http://localhost:5000/productNames")
      .then((res) => setproductNames(res.data));
  }, []);

  return (
    <>
      <section className="create-section">
        <form className="create-form" onSubmit={handleSubmit}>
          <div className="create-inputs">
            <h1 className="create-title">Create product</h1>
            {error && <div className="create-error">{error}</div>}
            <input
              type="text"
              placeholder="Product name"
              value={name}
              onChange={(e) => setname(e.target.value)}
              className="create-input"
              list="product-suggestions"
            />
            <datalist id="product-suggestions">
              {productNames.map((item, i) => (
                <option key={i} value={item} />
              ))}
            </datalist>
            <input
              type="number"
              placeholder="Quantity purchased in KG"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
              className="create-input"
            />
            <input
              type="text"
              placeholder="Buying price per KG"
              value={Bprice}
              onChange={(e) => setBprice(e.target.value)}
              className="create-input"
            />
            <input
              type="text"
              placeholder="Selling price per KG"
              value={Sprice}
              onChange={(e) => setSprice(e.target.value)}
              className="create-input"
            />
            <button type="submit" className="create-button">
              Create product
            </button>
          </div>
        </form>
      </section>
      <SuccessCard message="Product created successfully!" show={showSuccess} />
    </>
  );
};

export default Create;


import { useState, useEffect } from "react";

import "./user.css"
const User = () => {
  const [value, setValue] = useState("");
  const [products, setProducts] = useState([
    { name: "", quantity: "", price: "" },
    { name: "", quantity: "", price: "" },
    { name: "", quantity: "", price: "" },
  ]);

  useEffect(() => {
    const last = products[products.length - 1];
    if (last.name && last.quantity && last.price) {
      setProducts([...products, { name: "", quantity: "", price: "" }]);
    }
  }, [products]);

  const handleChange = (index, field, value) => {
    const updated = [...products];
    updated[index][field] = value;
    setProducts(updated);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const sales = products
      .filter((p) => p.name && p.quantity)
      .map((p) => ({
        productName: p.name,
        quantity: parseFloat(p.quantity),
      }));
    if (sales.length === 0) {
      alert("please enter valid  products  for sale ");
      return;
    }
    try {
      const res = await fetch("http://localhost:5000/record", {
        method: "POST",
        headers: { "content-Type": "application/json" },
        body: JSON.stringify(sales),
      });
      const data = await res.json();
      console.log("response:", data);
      alert("sales recorded");
      setProducts([{ name: "", quantity: "", price: "" }]);
      setValue("");
    } catch (error) {
      console.error("could  not  record  your  products");
    }
  };

  return (
    <div className="user-main">
      <form className="user-form" onSubmit={handleSubmit}>
        <input
          type="date"
          className="user-date"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />
        <h2 className="user-title">Enter Products Sold</h2>

        {products.map((product, index) => (
          <div key={index} className="user-input-row">
            <input
              type="text"
              placeholder="Name"
              className="user-input"
              value={product.name}
              onChange={(e) => handleChange(index, "name", e.target.value)}
            />
            <input
              type="text"
              placeholder="Quantity"
              className="user-input"
              value={product.quantity}
              onChange={(e) => handleChange(index, "quantity", e.target.value)}
            />
            <input
              type="text"
              placeholder="Price"
              className="user-input"
              value={product.price}
              onChange={(e) => handleChange(index, "price", e.target.value)}
            />
          </div>
        ))}

        <button type="submit" className="user-submit">
          Submit
        </button>
      </form>
    </div>
  );
};

export default User;
